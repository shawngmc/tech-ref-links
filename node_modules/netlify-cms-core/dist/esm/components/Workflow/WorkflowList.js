"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@emotion/core");

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _moment = _interopRequireDefault(require("moment"));

var _reactPolyglot = require("react-polyglot");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _UI = require("../UI");

var _WorkflowCard = _interopRequireDefault(require("./WorkflowCard"));

var _collections = require("../../reducers/collections");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const WorkflowListContainer = (0, _styledBase.default)("div", {
  target: "e1sboua10",
  label: "WorkflowListContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1booyhj",
  styles: "min-height:60%;display:grid;grid-template-columns:33.3% 33.3% 33.3%;"
} : {
  name: "1booyhj",
  styles: "min-height:60%;display:grid;grid-template-columns:33.3% 33.3% 33.3%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const WorkflowListContainerOpenAuthoring = (0, _styledBase.default)("div", {
  target: "e1sboua11",
  label: "WorkflowListContainerOpenAuthoring"
})(process.env.NODE_ENV === "production" ? {
  name: "1q1dzdp",
  styles: "min-height:60%;display:grid;grid-template-columns:50% 50% 0%;"
} : {
  name: "1q1dzdp",
  styles: "min-height:60%;display:grid;grid-template-columns:50% 50% 0%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref = process.env.NODE_ENV === "production" ? {
  name: "qbubgm",
  styles: "margin-left:0;"
} : {
  name: "qbubgm",
  styles: "margin-left:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1xzanuf",
  styles: "margin-right:0;"
} : {
  name: "1xzanuf",
  styles: "margin-right:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const styles = {
  columnPosition: idx => idx === 0 && _ref || idx === 2 && _ref2 || /*#__PURE__*/(0, _core.css)("&:before,&:after{content:'';display:block;position:absolute;width:2px;height:80%;top:76px;background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";}&:before{left:-23px;}&:after{right:-23px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  column: process.env.NODE_ENV === "production" ? {
    name: "f8lkbe-column",
    styles: "margin:0 20px;transition:background-color 0.5s ease;border:2px dashed transparent;border-radius:4px;position:relative;height:100%;;label:column;"
  } : {
    name: "f8lkbe-column",
    styles: "margin:0 20px;transition:background-color 0.5s ease;border:2px dashed transparent;border-radius:4px;position:relative;height:100%;;label:column;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  columnHovered: /*#__PURE__*/(0, _core.css)("border-color:", _netlifyCmsUiDefault.colors.active, ";;label:columnHovered;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  hiddenColumn: process.env.NODE_ENV === "production" ? {
    name: "9wvypa-hiddenColumn",
    styles: "display:none;;label:hiddenColumn;"
  } : {
    name: "9wvypa-hiddenColumn",
    styles: "display:none;;label:hiddenColumn;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  hiddenRightBorder: process.env.NODE_ENV === "production" ? {
    name: "hg8806-hiddenRightBorder",
    styles: "&:not(:first-child):not(:last-child){&:after{display:none;}};label:hiddenRightBorder;"
  } : {
    name: "hg8806-hiddenRightBorder",
    styles: "&:not(:first-child):not(:last-child){&:after{display:none;}};label:hiddenRightBorder;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const ColumnHeader = (0, _styledBase.default)("h2", {
  target: "e1sboua12",
  label: "ColumnHeader"
})("font-size:20px;font-weight:normal;padding:4px 14px;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";margin-bottom:28px;", props => props.name === 'draft' && /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusDraftBackground, ";color:", _netlifyCmsUiDefault.colors.statusDraftText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", props => props.name === 'pending_review' && /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusReviewBackground, ";color:", _netlifyCmsUiDefault.colors.statusReviewText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", props => props.name === 'pending_publish' && /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusReadyBackground, ";color:", _netlifyCmsUiDefault.colors.statusReadyText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const ColumnCount = (0, _styledBase.default)("p", {
  target: "e1sboua13",
  label: "ColumnCount"
})("font-size:13px;font-weight:500;color:", _netlifyCmsUiDefault.colors.text, ";text-transform:uppercase;margin-bottom:6px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")); // This is a namespace so that we can only drop these elements on a DropTarget with the same

const DNDNamespace = 'cms-workflow';

function getColumnHeaderText(columnName, t) {
  switch (columnName) {
    case 'draft':
      return t('workflow.workflowList.draftHeader');

    case 'pending_review':
      return t('workflow.workflowList.inReviewHeader');

    case 'pending_publish':
      return t('workflow.workflowList.readyHeader');
  }
}

class WorkflowList extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleChangeStatus", (newStatus, dragProps) => {
      const slug = dragProps.slug;
      const collection = dragProps.collection;
      const oldStatus = dragProps.ownStatus;
      this.props.handleChangeStatus(collection, slug, oldStatus, newStatus);
    });

    _defineProperty(this, "requestDelete", (collection, slug, ownStatus) => {
      if (window.confirm(this.props.t('workflow.workflowList.onDeleteEntry'))) {
        this.props.handleDelete(collection, slug, ownStatus);
      }
    });

    _defineProperty(this, "requestPublish", (collection, slug, ownStatus) => {
      if (ownStatus !== _publishModes.status.last()) {
        window.alert(this.props.t('workflow.workflowList.onPublishingNotReadyEntry'));
        return;
      } else if (!window.confirm(this.props.t('workflow.workflowList.onPublishEntry'))) {
        return;
      }

      this.props.handlePublish(collection, slug);
    });

    _defineProperty(this, "renderColumns", (entries, column) => {
      const {
        isOpenAuthoring,
        collections,
        t
      } = this.props;
      if (!entries) return null;

      if (!column) {
        return entries.entrySeq().map(([currColumn, currEntries], idx) => (0, _core.jsx)(_UI.DropTarget, {
          namespace: DNDNamespace,
          key: currColumn,
          onDrop: this.handleChangeStatus.bind(this, currColumn)
        }, (connect, {
          isHovered
        }) => connect((0, _core.jsx)("div", {
          style: {
            height: '100%'
          }
        }, (0, _core.jsx)("div", {
          css: /*#__PURE__*/(0, _core.css)([styles.column, styles.columnPosition(idx), isHovered && styles.columnHovered, isOpenAuthoring && currColumn === 'pending_publish' && styles.hiddenColumn, isOpenAuthoring && currColumn === 'pending_review' && styles.hiddenRightBorder], ";label:WorkflowList;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
        }, (0, _core.jsx)(ColumnHeader, {
          name: currColumn
        }, getColumnHeaderText(currColumn, this.props.t)), (0, _core.jsx)(ColumnCount, null, this.props.t('workflow.workflowList.currentEntries', {
          smart_count: currEntries.size
        })), this.renderColumns(currEntries, currColumn))))));
      }

      return (0, _core.jsx)("div", null, entries.map(entry => {
        const timestamp = (0, _moment.default)(entry.get('updatedOn')).format(t('workflow.workflow.dateFormat'));
        const slug = entry.get('slug');
        const collectionName = entry.get('collection');
        const editLink = `collections/${collectionName}/entries/${slug}?ref=workflow`;
        const ownStatus = entry.get('status');
        const collection = collections.find(collection => collection.get('name') === collectionName);
        const collectionLabel = collection === null || collection === void 0 ? void 0 : collection.get('label');
        const isModification = entry.get('isModification');
        const allowPublish = collection === null || collection === void 0 ? void 0 : collection.get('publish');
        const canPublish = ownStatus === _publishModes.status.last() && !entry.get('isPersisting', false);
        return (0, _core.jsx)(_UI.DragSource, {
          namespace: DNDNamespace,
          key: `${collectionName}-${slug}`,
          slug: slug,
          collection: collectionName,
          ownStatus: ownStatus
        }, connect => connect((0, _core.jsx)("div", null, (0, _core.jsx)(_WorkflowCard.default, {
          collectionLabel: collectionLabel || collectionName,
          title: (0, _collections.selectEntryCollectionTitle)(collection, entry),
          authorLastChange: entry.getIn(['metaData', 'user']),
          body: entry.getIn(['data', 'body']),
          isModification: isModification,
          editLink: editLink,
          timestamp: timestamp,
          onDelete: this.requestDelete.bind(this, collectionName, slug, ownStatus),
          allowPublish: allowPublish,
          canPublish: canPublish,
          onPublish: this.requestPublish.bind(this, collectionName, slug, ownStatus)
        }))));
      }));
    });
  }

  render() {
    const columns = this.renderColumns(this.props.entries);
    const ListContainer = this.props.isOpenAuthoring ? WorkflowListContainerOpenAuthoring : WorkflowListContainer;
    return (0, _core.jsx)(ListContainer, null, columns);
  }

}

_defineProperty(WorkflowList, "propTypes", {
  entries: _reactImmutableProptypes.default.orderedMap,
  handleChangeStatus: _propTypes.default.func.isRequired,
  handlePublish: _propTypes.default.func.isRequired,
  handleDelete: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  isOpenAuthoring: _propTypes.default.bool,
  collections: _reactImmutableProptypes.default.map.isRequired
});

var _default = (0, _UI.HTML5DragDrop)((0, _reactPolyglot.translate)()(WorkflowList));

exports.default = _default;