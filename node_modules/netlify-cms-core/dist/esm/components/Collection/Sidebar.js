"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Sidebar = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactPolyglot = require("react-polyglot");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _collections = require("../../actions/collections");

var _CollectionSearch = _interopRequireDefault(require("./CollectionSearch"));

var _NestedCollection = _interopRequireDefault(require("./NestedCollection"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const styles = {
  sidebarNavLinkActive: /*#__PURE__*/(0, _core.css)("color:", _netlifyCmsUiDefault.colors.active, ";background-color:", _netlifyCmsUiDefault.colors.activeBackground, ";border-left-color:#4863c6;;label:sidebarNavLinkActive;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFhMkIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29sbGVjdGlvbi9TaWRlYmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBJY29uLCBjb21wb25lbnRzLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IHNlYXJjaENvbGxlY3Rpb25zIH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQgQ29sbGVjdGlvblNlYXJjaCBmcm9tICcuL0NvbGxlY3Rpb25TZWFyY2gnO1xuaW1wb3J0IE5lc3RlZENvbGxlY3Rpb24gZnJvbSAnLi9OZXN0ZWRDb2xsZWN0aW9uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBzaWRlYmFyTmF2TGlua0FjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmFjdGl2ZUJhY2tncm91bmR9O1xuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjNDg2M2M2O1xuICBgLFxufTtcblxuY29uc3QgU2lkZWJhckNvbnRhaW5lciA9IHN0eWxlZC5hc2lkZWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICB3aWR0aDogMjUwcHg7XG4gIHBhZGRpbmc6IDhweCAwIDEycHg7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgbWF4LWhlaWdodDogY2FsYygxMDB2aCAtIDExMnB4KTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbmA7XG5cbmNvbnN0IFNpZGViYXJIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIzcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMThweCAxMnB4IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGlzdCA9IHN0eWxlZC51bGBcbiAgbWFyZ2luOiAxNnB4IDAgMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5jb25zdCBTaWRlYmFyTmF2TGluayA9IHN0eWxlZChOYXZMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXdlaWdodDogNTAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuICB6LWluZGV4OiAtMTtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICBmbGV4LXNocmluazogMDtcbiAgfVxuXG4gICR7cHJvcHMgPT4gY3NzYFxuICAgICY6aG92ZXIsXG4gICAgJjphY3RpdmUsXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuc2lkZWJhck5hdkxpbmtBY3RpdmV9O1xuICAgIH1cbiAgYH07XG5gO1xuXG5leHBvcnQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIHNlYXJjaFRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsdGVyVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHJlbmRlckxpbmsgPSAoY29sbGVjdGlvbiwgZmlsdGVyVGVybSkgPT4ge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5nZXQoJ25hbWUnKTtcbiAgICBpZiAoY29sbGVjdGlvbi5oYXMoJ25lc3RlZCcpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkga2V5PXtjb2xsZWN0aW9uTmFtZX0+XG4gICAgICAgICAgPE5lc3RlZENvbGxlY3Rpb25cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBmaWx0ZXJUZXJtPXtmaWx0ZXJUZXJtfVxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e2NvbGxlY3Rpb25OYW1lfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICA8U2lkZWJhck5hdkxpbmtcbiAgICAgICAgICB0bz17YC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb25OYW1lfWB9XG4gICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lPVwic2lkZWJhci1hY3RpdmVcIlxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAge2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICA8L1NpZGViYXJOYXZMaW5rPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBzZWFyY2hUZXJtLCB0LCBmaWx0ZXJUZXJtIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTaWRlYmFyQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhckhlYWRpbmc+e3QoJ2NvbGxlY3Rpb24uc2lkZWJhci5jb2xsZWN0aW9ucycpfTwvU2lkZWJhckhlYWRpbmc+XG4gICAgICAgIDxDb2xsZWN0aW9uU2VhcmNoXG4gICAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgICAgICBjb2xsZWN0aW9ucz17Y29sbGVjdGlvbnN9XG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBvblN1Ym1pdD17KHF1ZXJ5LCBjb2xsZWN0aW9uKSA9PiBzZWFyY2hDb2xsZWN0aW9ucyhxdWVyeSwgY29sbGVjdGlvbil9XG4gICAgICAgIC8+XG4gICAgICAgIDxTaWRlYmFyTmF2TGlzdD5cbiAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgLmZpbHRlcihjb2xsZWN0aW9uID0+IGNvbGxlY3Rpb24uZ2V0KCdoaWRlJykgIT09IHRydWUpXG4gICAgICAgICAgICAubWFwKGNvbGxlY3Rpb24gPT4gdGhpcy5yZW5kZXJMaW5rKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGlzdD5cbiAgICAgIDwvU2lkZWJhckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKFNpZGViYXIpO1xuIl19 */"))
};
const SidebarContainer = (0, _styledBase.default)("aside", {
  target: "el9l68m0",
  label: "SidebarContainer"
})(_netlifyCmsUiDefault.components.card, ";width:250px;padding:8px 0 12px;position:fixed;max-height:calc(100vh - 112px);display:flex;flex-direction:column;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQnFDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJ0FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmVCYWNrZ3JvdW5kfTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzQ4NjNjNjtcbiAgYCxcbn07XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxMTJweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyM3B4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDE4cHggMTJweCAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTZweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2ZmZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpbHRlclRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgc2VhcmNoVGVybSwgdCwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8Q29sbGVjdGlvblNlYXJjaFxuICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAvPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));
const SidebarHeading = (0, _styledBase.default)("h2", {
  target: "el9l68m1",
  label: "SidebarHeading"
})("font-size:23px;font-weight:600;padding:0;margin:18px 12px 12px;color:", _netlifyCmsUiDefault.colors.textLead, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4QmdDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJ0FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmVCYWNrZ3JvdW5kfTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzQ4NjNjNjtcbiAgYCxcbn07XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxMTJweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyM3B4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDE4cHggMTJweCAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTZweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2ZmZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpbHRlclRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgc2VhcmNoVGVybSwgdCwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8Q29sbGVjdGlvblNlYXJjaFxuICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAvPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));
const SidebarNavList = (0, _styledBase.default)("ul", {
  target: "el9l68m2",
  label: "SidebarNavList"
})(process.env.NODE_ENV === "production" ? {
  name: "1gam4ys",
  styles: "margin:16px 0 0;list-style:none;overflow:auto;"
} : {
  name: "1gam4ys",
  styles: "margin:16px 0 0;list-style:none;overflow:auto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQ2dDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJ0FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmVCYWNrZ3JvdW5kfTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzQ4NjNjNjtcbiAgYCxcbn07XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxMTJweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyM3B4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDE4cHggMTJweCAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTZweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2ZmZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpbHRlclRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgc2VhcmNoVGVybSwgdCwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8Q29sbGVjdGlvblNlYXJjaFxuICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAvPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SidebarNavLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.NavLink, {
  target: "el9l68m3",
  label: "SidebarNavLink"
})("display:flex;font-size:14px;font-weight:500;align-items:center;padding:8px 12px;border-left:2px solid #fff;z-index:-1;", _netlifyCmsUiDefault.Icon, "{margin-right:8px;flex-shrink:0;}", props => /*#__PURE__*/(0, _core.css)("&:hover,&:active,&.", props.activeClassName, "{", styles.sidebarNavLinkActive, ";};label:SidebarNavLink;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRGdCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJ0FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmVCYWNrZ3JvdW5kfTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzQ4NjNjNjtcbiAgYCxcbn07XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxMTJweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyM3B4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDE4cHggMTJweCAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTZweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2ZmZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpbHRlclRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgc2VhcmNoVGVybSwgdCwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8Q29sbGVjdGlvblNlYXJjaFxuICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAvPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0Q3NDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vU2lkZWJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSWNvbiwgY29tcG9uZW50cywgY29sb3JzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzZWFyY2hDb2xsZWN0aW9ucyB9IGZyb20gJ0FjdGlvbnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IENvbGxlY3Rpb25TZWFyY2ggZnJvbSAnLi9Db2xsZWN0aW9uU2VhcmNoJztcbmltcG9ydCBOZXN0ZWRDb2xsZWN0aW9uIGZyb20gJy4vTmVzdGVkQ29sbGVjdGlvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2lkZWJhck5hdkxpbmtBY3RpdmU6IGNzc2BcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5hY3RpdmVCYWNrZ3JvdW5kfTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogIzQ4NjNjNjtcbiAgYCxcbn07XG5cbmNvbnN0IFNpZGViYXJDb250YWluZXIgPSBzdHlsZWQuYXNpZGVgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6IDI1MHB4O1xuICBwYWRkaW5nOiA4cHggMCAxMnB4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSAxMTJweCk7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5gO1xuXG5jb25zdCBTaWRlYmFySGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgZm9udC1zaXplOiAyM3B4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBwYWRkaW5nOiAwO1xuICBtYXJnaW46IDE4cHggMTJweCAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpc3QgPSBzdHlsZWQudWxgXG4gIG1hcmdpbjogMTZweCAwIDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIG92ZXJmbG93OiBhdXRvO1xuYDtcblxuY29uc3QgU2lkZWJhck5hdkxpbmsgPSBzdHlsZWQoTmF2TGluaylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlci1sZWZ0OiAycHggc29saWQgI2ZmZjtcbiAgei1pbmRleDogLTE7XG5cbiAgJHtJY29ufSB7XG4gICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgZmxleC1zaHJpbms6IDA7XG4gIH1cblxuICAke3Byb3BzID0+IGNzc2BcbiAgICAmOmhvdmVyLFxuICAgICY6YWN0aXZlLFxuICAgICYuJHtwcm9wcy5hY3RpdmVDbGFzc05hbWV9IHtcbiAgICAgICR7c3R5bGVzLnNpZGViYXJOYXZMaW5rQWN0aXZlfTtcbiAgICB9XG4gIGB9O1xuYDtcblxuZXhwb3J0IGNsYXNzIFNpZGViYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNvbGxlY3Rpb25zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpbHRlclRlcm06IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICByZW5kZXJMaW5rID0gKGNvbGxlY3Rpb24sIGZpbHRlclRlcm0pID0+IHtcbiAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbGxlY3Rpb24uaGFzKCduZXN0ZWQnKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGxpIGtleT17Y29sbGVjdGlvbk5hbWV9PlxuICAgICAgICAgIDxOZXN0ZWRDb2xsZWN0aW9uXG4gICAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgICAgZmlsdGVyVGVybT17ZmlsdGVyVGVybX1cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtjb2xsZWN0aW9uTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxsaSBrZXk9e2NvbGxlY3Rpb25OYW1lfT5cbiAgICAgICAgPFNpZGViYXJOYXZMaW5rXG4gICAgICAgICAgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uTmFtZX1gfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBkYXRhLXRlc3RpZD17Y29sbGVjdGlvbk5hbWV9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNvbiB0eXBlPVwid3JpdGVcIiAvPlxuICAgICAgICAgIHtjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgPC9TaWRlYmFyTmF2TGluaz5cbiAgICAgIDwvbGk+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgc2VhcmNoVGVybSwgdCwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8U2lkZWJhckNvbnRhaW5lcj5cbiAgICAgICAgPFNpZGViYXJIZWFkaW5nPnt0KCdjb2xsZWN0aW9uLnNpZGViYXIuY29sbGVjdGlvbnMnKX08L1NpZGViYXJIZWFkaW5nPlxuICAgICAgICA8Q29sbGVjdGlvblNlYXJjaFxuICAgICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAgICAgY29sbGVjdGlvbnM9e2NvbGxlY3Rpb25zfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgb25TdWJtaXQ9eyhxdWVyeSwgY29sbGVjdGlvbikgPT4gc2VhcmNoQ29sbGVjdGlvbnMocXVlcnksIGNvbGxlY3Rpb24pfVxuICAgICAgICAvPlxuICAgICAgICA8U2lkZWJhck5hdkxpc3Q+XG4gICAgICAgICAge2NvbGxlY3Rpb25zXG4gICAgICAgICAgICAudG9MaXN0KClcbiAgICAgICAgICAgIC5maWx0ZXIoY29sbGVjdGlvbiA9PiBjb2xsZWN0aW9uLmdldCgnaGlkZScpICE9PSB0cnVlKVxuICAgICAgICAgICAgLm1hcChjb2xsZWN0aW9uID0+IHRoaXMucmVuZGVyTGluayhjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtKSl9XG4gICAgICAgIDwvU2lkZWJhck5hdkxpc3Q+XG4gICAgICA8L1NpZGViYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShTaWRlYmFyKTtcbiJdfQ== */"));

class Sidebar extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "renderLink", (collection, filterTerm) => {
      const collectionName = collection.get('name');

      if (collection.has('nested')) {
        return (0, _core.jsx)("li", {
          key: collectionName
        }, (0, _core.jsx)(_NestedCollection.default, {
          collection: collection,
          filterTerm: filterTerm,
          "data-testid": collectionName
        }));
      }

      return (0, _core.jsx)("li", {
        key: collectionName
      }, (0, _core.jsx)(SidebarNavLink, {
        to: `/collections/${collectionName}`,
        activeClassName: "sidebar-active",
        "data-testid": collectionName
      }, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "write"
      }), collection.get('label')));
    });
  }

  render() {
    const {
      collections,
      collection,
      searchTerm,
      t,
      filterTerm
    } = this.props;
    return (0, _core.jsx)(SidebarContainer, null, (0, _core.jsx)(SidebarHeading, null, t('collection.sidebar.collections')), (0, _core.jsx)(_CollectionSearch.default, {
      searchTerm: searchTerm,
      collections: collections,
      collection: collection,
      onSubmit: (query, collection) => (0, _collections.searchCollections)(query, collection)
    }), (0, _core.jsx)(SidebarNavList, null, collections.toList().filter(collection => collection.get('hide') !== true).map(collection => this.renderLink(collection, filterTerm))));
  }

}

exports.Sidebar = Sidebar;

_defineProperty(Sidebar, "propTypes", {
  collections: _reactImmutableProptypes.default.map.isRequired,
  collection: _reactImmutableProptypes.default.map,
  searchTerm: _propTypes.default.string,
  filterTerm: _propTypes.default.string,
  t: _propTypes.default.func.isRequired
});

var _default = (0, _reactPolyglot.translate)()(Sidebar);

exports.default = _default;