"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Collection = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactRedux = require("react-redux");

var _reactPolyglot = require("react-polyglot");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _urlHelper = require("../../lib/urlHelper");

var _Sidebar = _interopRequireDefault(require("./Sidebar"));

var _CollectionTop = _interopRequireDefault(require("./CollectionTop"));

var _EntriesCollection = _interopRequireDefault(require("./Entries/EntriesCollection"));

var _EntriesSearch = _interopRequireDefault(require("./Entries/EntriesSearch"));

var _CollectionControls = _interopRequireDefault(require("./CollectionControls"));

var _entries = require("../../actions/entries");

var _collections = require("../../reducers/collections");

var _entries2 = require("../../reducers/entries");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const CollectionContainer = (0, _styledBase.default)("div", {
  target: "e1yhfkro0",
  label: "CollectionContainer"
})("margin:", _netlifyCmsUiDefault.lengths.pageMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CollectionMain = (0, _styledBase.default)("main", {
  target: "e1yhfkro1",
  label: "CollectionMain"
})(process.env.NODE_ENV === "production" ? {
  name: "1r4jzjw",
  styles: "padding-left:280px;"
} : {
  name: "1r4jzjw",
  styles: "padding-left:280px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchResultContainer = (0, _styledBase.default)("div", {
  target: "e1yhfkro2",
  label: "SearchResultContainer"
})(_netlifyCmsUiDefault.components.cardTop, ";margin-bottom:22px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SearchResultHeading = (0, _styledBase.default)("h1", {
  target: "e1yhfkro3",
  label: "SearchResultHeading"
})(_netlifyCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class Collection extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "renderEntriesCollection", () => {
      const {
        collection,
        filterTerm,
        viewStyle
      } = this.props;
      return (0, _core.jsx)(_EntriesCollection.default, {
        collection: collection,
        viewStyle: viewStyle,
        filterTerm: filterTerm
      });
    });

    _defineProperty(this, "renderEntriesSearch", () => {
      const {
        searchTerm,
        collections,
        collection,
        isSingleSearchResult
      } = this.props;
      return (0, _core.jsx)(_EntriesSearch.default, {
        collections: isSingleSearchResult ? collections.filter(c => c === collection) : collections,
        searchTerm: searchTerm
      });
    });
  }

  render() {
    const {
      collection,
      collections,
      collectionName,
      isSearchResults,
      isSingleSearchResult,
      searchTerm,
      sortableFields,
      onSortClick,
      sort,
      viewFilters,
      viewGroups,
      filterTerm,
      t,
      onFilterClick,
      onGroupClick,
      filter,
      group,
      onChangeViewStyle,
      viewStyle
    } = this.props;
    let newEntryUrl = collection.get('create') ? (0, _urlHelper.getNewEntryUrl)(collectionName) : '';

    if (newEntryUrl && filterTerm) {
      newEntryUrl = (0, _urlHelper.getNewEntryUrl)(collectionName);

      if (filterTerm) {
        newEntryUrl = `${newEntryUrl}?path=${filterTerm}`;
      }
    }

    const searchResultKey = 'collection.collectionTop.searchResults' + (isSingleSearchResult ? 'InCollection' : '');
    return (0, _core.jsx)(CollectionContainer, null, (0, _core.jsx)(_Sidebar.default, {
      collections: collections,
      collection: (!isSearchResults || isSingleSearchResult) && collection,
      searchTerm: searchTerm,
      filterTerm: filterTerm
    }), (0, _core.jsx)(CollectionMain, null, isSearchResults ? (0, _core.jsx)(SearchResultContainer, null, (0, _core.jsx)(SearchResultHeading, null, t(searchResultKey, {
      searchTerm,
      collection: collection.get('label')
    }))) : (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_CollectionTop.default, {
      collection: collection,
      newEntryUrl: newEntryUrl
    }), (0, _core.jsx)(_CollectionControls.default, {
      viewStyle: viewStyle,
      onChangeViewStyle: onChangeViewStyle,
      sortableFields: sortableFields,
      onSortClick: onSortClick,
      sort: sort,
      viewFilters: viewFilters,
      viewGroups: viewGroups,
      t: t,
      onFilterClick: onFilterClick,
      onGroupClick: onGroupClick,
      filter: filter,
      group: group
    })), isSearchResults ? this.renderEntriesSearch() : this.renderEntriesCollection()));
  }

}

exports.Collection = Collection;

_defineProperty(Collection, "propTypes", {
  searchTerm: _propTypes.default.string,
  collectionName: _propTypes.default.string,
  isSearchResults: _propTypes.default.bool,
  isSingleSearchResult: _propTypes.default.bool,
  collection: _reactImmutableProptypes.default.map.isRequired,
  collections: _reactImmutableProptypes.default.map.isRequired,
  sortableFields: _propTypes.default.array,
  sort: _reactImmutableProptypes.default.orderedMap,
  onSortClick: _propTypes.default.func.isRequired
});

function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const {
    isSearchResults,
    match,
    t
  } = ownProps;
  const {
    name,
    searchTerm = '',
    filterTerm = ''
  } = match.params;
  const collection = name ? collections.get(name) : collections.first();
  const sort = (0, _entries2.selectEntriesSort)(state.entries, collection.get('name'));
  const sortableFields = (0, _collections.selectSortableFields)(collection, t);
  const viewFilters = (0, _collections.selectViewFilters)(collection);
  const viewGroups = (0, _collections.selectViewGroups)(collection);
  const filter = (0, _entries2.selectEntriesFilter)(state.entries, collection.get('name'));
  const group = (0, _entries2.selectEntriesGroup)(state.entries, collection.get('name'));
  const viewStyle = (0, _entries2.selectViewStyle)(state.entries);
  return {
    collection,
    collections,
    collectionName: name,
    isSearchResults,
    searchTerm,
    filterTerm,
    sort,
    sortableFields,
    viewFilters,
    viewGroups,
    filter,
    group,
    viewStyle
  };
}

const mapDispatchToProps = {
  sortByField: _entries.sortByField,
  filterByField: _entries.filterByField,
  changeViewStyle: _entries.changeViewStyle,
  groupByField: _entries.groupByField
};

function mergeProps(stateProps, dispatchProps, ownProps) {
  return _objectSpread(_objectSpread(_objectSpread({}, stateProps), ownProps), {}, {
    onSortClick: (key, direction) => dispatchProps.sortByField(stateProps.collection, key, direction),
    onFilterClick: filter => dispatchProps.filterByField(stateProps.collection, filter),
    onGroupClick: group => dispatchProps.groupByField(stateProps.collection, group),
    onChangeViewStyle: viewStyle => dispatchProps.changeViewStyle(viewStyle)
  });
}

const ConnectedCollection = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(Collection);

var _default = (0, _reactPolyglot.translate)()(ConnectedCollection);

exports.default = _default;