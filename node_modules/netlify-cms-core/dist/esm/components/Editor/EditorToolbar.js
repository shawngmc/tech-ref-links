"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactPolyglot = require("react-polyglot");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _SettingsDropdown = _interopRequireDefault(require("../UI/SettingsDropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const styles = {
  noOverflow: process.env.NODE_ENV === "production" ? {
    name: "1ven8wv-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:noOverflow;"
  } : {
    name: "1ven8wv-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;;label:noOverflow;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;"
  } : {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  toolbarSection: /*#__PURE__*/(0, _core.css)("height:100%;display:flex;align-items:center;border:0 solid ", _netlifyCmsUiDefault.colors.textFieldBorder, ";;label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  publishedButton: /*#__PURE__*/(0, _core.css)("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";;label:publishedButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
const DropdownButton = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe0",
  label: "DropdownButton"
})(styles.noOverflow, " @media (max-width:1200px){padding-left:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe1",
  label: "ToolbarContainer"
})("box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:", _netlifyCmsUiDefault.zIndex.zIndex300, ";background-color:#fff;height:66px;display:flex;justify-content:space-between;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMain = (0, _styledBase.default)("div", {
  target: "evqrzhe2",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";flex:10;display:flex;justify-content:space-between;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSubSectionFirst = (0, _styledBase.default)("div", {
  target: "evqrzhe3",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "70qvj9",
  styles: "display:flex;align-items:center;"
} : {
  name: "70qvj9",
  styles: "display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSubSectionLast = ( /*#__PURE__*/0, _styledBase.default)(ToolbarSubSectionFirst, {
  target: "evqrzhe4",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "1a9getn",
  styles: "justify-content:flex-end;"
} : {
  name: "1a9getn",
  styles: "justify-content:flex-end;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionBackLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.Link, {
  target: "evqrzhe5",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = (0, _styledBase.default)("div", {
  target: "evqrzhe6",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.Dropdown, {
  target: "evqrzhe7",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = (0, _styledBase.default)("div", {
  target: "evqrzhe8",
  label: "BackArrow"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = (0, _styledBase.default)("div", {
  target: "evqrzhe9",
  label: "BackCollection"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = (0, _styledBase.default)("div", {
  target: "evqrzhe10",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "19ug521",
  styles: "margin-top:6px;"
} : {
  name: "19ug521",
  styles: "margin-top:6px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const BackStatusUnchanged = ( /*#__PURE__*/0, _styledBase.default)(BackStatus, {
  target: "evqrzhe11",
  label: "BackStatusUnchanged"
})(_netlifyCmsUiDefault.components.textBadgeSuccess, ";&::after{height:12px;width:15.5px;color:", _netlifyCmsUiDefault.colors.successText, ";margin-left:5px;position:relative;top:1px;content:url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' width='15' height='11'><path fill='#005614' fill-rule='nonzero' d='M4.016 11l-.648-.946a6.202 6.202 0 0 0-.157-.22 9.526 9.526 0 0 1-.096-.133l-.511-.7a7.413 7.413 0 0 0-.162-.214l-.102-.134-.265-.346a26.903 26.903 0 0 0-.543-.687l-.11-.136c-.143-.179-.291-.363-.442-.54l-.278-.332a8.854 8.854 0 0 0-.192-.225L.417 6.28l-.283-.324L0 5.805l1.376-1.602c.04.027.186.132.186.132l.377.272.129.095c.08.058.16.115.237.175l.37.28c.192.142.382.292.565.436l.162.126c.27.21.503.398.714.574l.477.393c.078.064.156.127.23.194l.433.375.171-.205A50.865 50.865 0 0 1 8.18 4.023a35.163 35.163 0 0 1 2.382-2.213c.207-.174.42-.349.635-.518l.328-.255.333-.245c.072-.055.146-.107.221-.159l.117-.083c.11-.077.225-.155.341-.23.163-.11.334-.217.503-.32l1.158 1.74a11.908 11.908 0 0 0-.64.55l-.065.06c-.07.062-.139.125-.207.192l-.258.249-.26.265c-.173.176-.345.357-.512.539a32.626 32.626 0 0 0-1.915 2.313 52.115 52.115 0 0 0-2.572 3.746l-.392.642-.19.322-.233.382H4.016z'/></svg>\");}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatusChanged = ( /*#__PURE__*/0, _styledBase.default)(BackStatus, {
  target: "evqrzhe12",
  label: "BackStatusChanged"
})(_netlifyCmsUiDefault.components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarButton = (0, _styledBase.default)("button", {
  target: "evqrzhe13",
  label: "ToolbarButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", styles.buttonMargin, ";", styles.noOverflow, ";display:block;@media (max-width:1200px){padding:0 10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStJbUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7XG4gIEljb24sXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIFN0eWxlZERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnNSYXcsXG4gIGNvbG9ycyxcbiAgY29tcG9uZW50cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IHN0YXR1cyB9IGZyb20gJ0NvbnN0YW50cy9wdWJsaXNoTW9kZXMnO1xuaW1wb3J0IFNldHRpbmdzRHJvcGRvd24gZnJvbSAnVUkvU2V0dGluZ3NEcm9wZG93bic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbm9PdmVyZmxvdzogY3NzYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgYCxcbiAgYnV0dG9uTWFyZ2luOiBjc3NgXG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIGAsXG4gIHRvb2xiYXJTZWN0aW9uOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDAgc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYCxcbiAgcHVibGlzaGVkQnV0dG9uOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG4gIGAsXG59O1xuXG5jb25zdCBEcm9wZG93bkJ1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7c3R5bGVzLm5vT3ZlcmZsb3d9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBib3gtc2hhZG93OiAwIDJweCA2cHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMDUpLCAwIDFweCAzcHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMSksXG4gICAgMCAycHggNTRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgei1pbmRleDogJHt6SW5kZXguekluZGV4MzAwfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgaGVpZ2h0OiA2NnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbk1haW4gPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGZsZXg6IDEwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHBhZGRpbmc6IDAgMTBweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTdWJTZWN0aW9uRmlyc3QgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25MYXN0ID0gc3R5bGVkKFRvb2xiYXJTdWJTZWN0aW9uRmlyc3QpYFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25CYWNrTGluayA9IHN0eWxlZChMaW5rKWBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItcmlnaHQtd2lkdGg6IDFweDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgcGFkZGluZzogMCAyMHB4O1xuXG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMWYyZjQ7XG4gIH1cbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWV0YSA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgYm9yZGVyLWxlZnQtd2lkdGg6IDFweDtcbiAgcGFkZGluZzogMCA3cHg7XG5gO1xuXG5jb25zdCBUb29sYmFyRHJvcGRvd24gPSBzdHlsZWQoRHJvcGRvd24pYFxuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuXG4gICR7SWNvbn0ge1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgfVxuYDtcblxuY29uc3QgQmFja0Fycm93ID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAyMXB4O1xuICBmb250LXdlaWdodDogNjAwO1xuICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG5gO1xuXG5jb25zdCBCYWNrQ29sbGVjdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIGZvbnQtc2l6ZTogMTRweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXMgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiA2cHg7XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzVW5jaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlU3VjY2Vzc307XG5cbiAgJjo6YWZ0ZXIge1xuICAgIGhlaWdodDogMTJweDtcbiAgICB3aWR0aDogMTUuNXB4O1xuICAgIGNvbG9yOiAke2NvbG9ycy5zdWNjZXNzVGV4dH07XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcblxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6IDFweDtcblxuICAgIGNvbnRlbnQ6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDsgdXRmOCwgPHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScxNScgaGVpZ2h0PScxMSc+PHBhdGggZmlsbD0nIzAwNTYxNCcgZmlsbC1ydWxlPSdub256ZXJvJyBkPSdNNC4wMTYgMTFsLS42NDgtLjk0NmE2LjIwMiA2LjIwMiAwIDAgMC0uMTU3LS4yMiA5LjUyNiA5LjUyNiAwIDAgMS0uMDk2LS4xMzNsLS41MTEtLjdhNy40MTMgNy40MTMgMCAwIDAtLjE2Mi0uMjE0bC0uMTAyLS4xMzQtLjI2NS0uMzQ2YTI2LjkwMyAyNi45MDMgMCAwIDAtLjU0My0uNjg3bC0uMTEtLjEzNmMtLjE0My0uMTc5LS4yOTEtLjM2My0uNDQyLS41NGwtLjI3OC0uMzMyYTguODU0IDguODU0IDAgMCAwLS4xOTItLjIyNUwuNDE3IDYuMjhsLS4yODMtLjMyNEwwIDUuODA1bDEuMzc2LTEuNjAyYy4wNC4wMjcuMTg2LjEzMi4xODYuMTMybC4zNzcuMjcyLjEyOS4wOTVjLjA4LjA1OC4xNi4xMTUuMjM3LjE3NWwuMzcuMjhjLjE5Mi4xNDIuMzgyLjI5Mi41NjUuNDM2bC4xNjIuMTI2Yy4yNy4yMS41MDMuMzk4LjcxNC41NzRsLjQ3Ny4zOTNjLjA3OC4wNjQuMTU2LjEyNy4yMy4xOTRsLjQzMy4zNzUuMTcxLS4yMDVBNTAuODY1IDUwLjg2NSAwIDAgMSA4LjE4IDQuMDIzYTM1LjE2MyAzNS4xNjMgMCAwIDEgMi4zODItMi4yMTNjLjIwNy0uMTc0LjQyLS4zNDkuNjM1LS41MThsLjMyOC0uMjU1LjMzMy0uMjQ1Yy4wNzItLjA1NS4xNDYtLjEwNy4yMjEtLjE1OWwuMTE3LS4wODNjLjExLS4wNzcuMjI1LS4xNTUuMzQxLS4yMy4xNjMtLjExLjMzNC0uMjE3LjUwMy0uMzJsMS4xNTggMS43NGExMS45MDggMTEuOTA4IDAgMCAwLS42NC41NWwtLjA2NS4wNmMtLjA3LjA2Mi0uMTM5LjEyNS0uMjA3LjE5MmwtLjI1OC4yNDktLjI2LjI2NWMtLjE3My4xNzYtLjM0NS4zNTctLjUxMi41MzlhMzIuNjI2IDMyLjYyNiAwIDAgMC0xLjkxNSAyLjMxMyA1Mi4xMTUgNTIuMTE1IDAgMCAwLTIuNTcyIDMuNzQ2bC0uMzkyLjY0Mi0uMTkuMzIyLS4yMzMuMzgySDQuMDE2eicvPjwvc3ZnPlwiKTtcbiAgfVxuYDtcblxuY29uc3QgQmFja1N0YXR1c0NoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VEYW5nZXJ9O1xuYDtcblxuY29uc3QgVG9vbGJhckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG4gICR7c3R5bGVzLm5vT3ZlcmZsb3d9O1xuICBkaXNwbGF5OiBibG9jaztcblxuICBAbWVkaWEgKG1heC13aWR0aDogMTIwMHB4KSB7XG4gICAgcGFkZGluZzogMCAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChEcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5jbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNwbGF5VXJsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBoYXNXb3JrZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXNlT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc05ld0VudHJ5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc01vZGlmaWNhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlcGxveVByZXZpZXc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBlZGl0b3JCYWNrTGluazogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzaG93RGVsZXRlLCBvbkRlbGV0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3Nob3dEZWxldGUgPyAoXG4gICAgICAgICAgPERlbGV0ZUJ1dHRvbiBvbkNsaWNrPXtvbkRlbGV0ZX0+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZUVudHJ5Jyl9PC9EZWxldGVCdXR0b24+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSBsYWJlbCA9PiB7XG4gICAgY29uc3QgeyBkZXBsb3lQcmV2aWV3ID0ge30sIGxvYWREZXBsb3lQcmV2aWV3LCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdXJsLCBzdGF0dXMsIGlzRmV0Y2hpbmcgfSA9IGRlcGxveVByZXZpZXc7XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlcGxveVByZXZpZXdSZWFkeSA9IHN0YXR1cyA9PT0gJ1NVQ0NFU1MnICYmICFpc0ZldGNoaW5nO1xuICAgIHJldHVybiAoXG4gICAgICA8UHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAge2RlcGxveVByZXZpZXdSZWFkeSA/IChcbiAgICAgICAgICA8UHJldmlld0xpbmsgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICA8c3Bhbj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cIm5ldy10YWJcIiBzaXplPVwieHNtYWxsXCIgLz5cbiAgICAgICAgICA8L1ByZXZpZXdMaW5rPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxSZWZyZXNoUHJldmlld0J1dHRvbiBvbkNsaWNrPXtsb2FkRGVwbG95UHJldmlld30+XG4gICAgICAgICAgICA8c3Bhbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld1BlbmRpbmdCdXR0b25MYWJlbCcpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJyZWZyZXNoXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9SZWZyZXNoUHJldmlld0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjEyMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFN0YXR1c0J1dHRvbj5cbiAgICAgICAgICAgIHtpc1VwZGF0aW5nU3RhdHVzXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudXBkYXRpbmcnKVxuICAgICAgICAgICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNldFN0YXR1cycpfVxuICAgICAgICAgIDwvU3RhdHVzQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0Jyl9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ0RSQUZUJyl9XG4gICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAvPlxuICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUkVWSUVXJyl9XG4gICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAvPlxuICAgICAgICB7dXNlT3BlbkF1dGhvcmluZyA/IChcbiAgICAgICAgICAnJ1xuICAgICAgICApIDogKFxuICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaH1cbiAgICAgICAgLz5cbiAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZENyZWF0ZU5ldycpfVxuICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kTmV3fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2ggfSkgPT4ge1xuICAgIGNvbnN0IHsgdW5QdWJsaXNoLCBvbkR1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIGNhblB1Ymxpc2ggfHwgY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICB7aXNQZXJzaXN0aW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX1cbiAgICAgICAgICA8L1B1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIHtjYW5QdWJsaXNoICYmIChcbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5wdWJsaXNoJyl9XG4gICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e3VuUHVibGlzaH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICB7Y2FuQ3JlYXRlICYmIChcbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHVwbGljYXRlJyl9XG4gICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uRHVwbGljYXRlfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICApIDogKFxuICAgICAgJydcbiAgICApO1xuICB9O1xuXG4gIHJlbmRlckV4aXN0aW5nRW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25EdXBsaWNhdGUsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGNhbkNyZWF0ZSA/IChcbiAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX08L1B1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIHtcbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHVwbGljYXRlJyl9XG4gICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uRHVwbGljYXRlfVxuICAgICAgICAgIC8+XG4gICAgICAgIH1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICA8UHVibGlzaGVkQnV0dG9uPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX08L1B1Ymxpc2hlZEJ1dHRvbj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlck5ld0VudHJ5U2ltcGxlUHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlIH0pID0+IHtcbiAgICBjb25zdCB7IG9uUGVyc2lzdCwgb25QZXJzaXN0QW5kTmV3LCBvblBlcnNpc3RBbmREdXBsaWNhdGUsIGlzUGVyc2lzdGluZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgIDxQdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICAgICB7aXNQZXJzaXN0aW5nXG4gICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICApfVxuICAgICAgICA+XG4gICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hOb3cnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0fVxuICAgICAgICAgIC8+XG4gICAgICAgICAge2NhbkNyZWF0ZSA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZENyZWF0ZU5ldycpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdEFuZE5ld31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kRHVwbGljYXRlJyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kRHVwbGljYXRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9uLCBoYXNDaGFuZ2VkLCBpc05ld0VudHJ5LCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmICghaXNOZXdFbnRyeSAmJiAhaGFzQ2hhbmdlZCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7dGhpcy5yZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHModCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAge3RoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd1NhdmVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICBpc0RlbGV0aW5nLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIGlzTW9kaWZpY2F0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGRlbGV0ZUxhYmVsID1cbiAgICAgIChoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiZcbiAgICAgICAgaXNNb2RpZmljYXRpb24gJiZcbiAgICAgICAgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzJykpIHx8XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIChpc05ld0VudHJ5IHx8ICFpc01vZGlmaWNhdGlvbikgJiZcbiAgICAgICAgdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRlVW5wdWJsaXNoZWRFbnRyeScpKSB8fFxuICAgICAgKCFoYXNVbnB1Ymxpc2hlZENoYW5nZXMgJiYgIWlzTW9kaWZpY2F0aW9uICYmIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVB1Ymxpc2hlZEVudHJ5JykpO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIDxTYXZlQnV0dG9uIGtleT1cInNhdmUtYnV0dG9uXCIgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX0+XG4gICAgICAgIHtpc1BlcnNpc3RpbmcgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zYXZpbmcnKSA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmUnKX1cbiAgICAgIDwvU2F2ZUJ1dHRvbj4sXG4gICAgICAhc2hvd0RlbGV0ZSAmJiAhaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiA/IG51bGwgOiAoXG4gICAgICAgIDxEZWxldGVCdXR0b25cbiAgICAgICAgICBrZXk9XCJkZWxldGUtYnV0dG9uXCJcbiAgICAgICAgICBvbkNsaWNrPXtoYXNVbnB1Ymxpc2hlZENoYW5nZXMgPyBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyA6IG9uRGVsZXRlfVxuICAgICAgICA+XG4gICAgICAgICAge2lzRGVsZXRpbmcgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGluZycpIDogZGVsZXRlTGFiZWx9XG4gICAgICAgIDwvRGVsZXRlQnV0dG9uPlxuICAgICAgKSxcbiAgICBdO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgY3VycmVudFN0YXR1cywgaXNOZXdFbnRyeSwgdXNlT3BlbkF1dGhvcmluZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcblxuICAgIGlmIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAge3RoaXMucmVuZGVyV29ya2Zsb3dTdGF0dXNDb250cm9scygpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlck5ld0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2ggfSl9XG4gICAgICAgIDwvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoIGNvbnRyb2wgZm9yIHB1Ymxpc2hlZCB3b3JrZmxvdyBlbnRyeS5cbiAgICAgKi9cbiAgICBpZiAoIWlzTmV3RW50cnkpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAge3RoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveUJ1dHRvbkxhYmVsJykpfVxuICAgICAgICAgIHt0aGlzLnJlbmRlckV4aXN0aW5nRW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBkaXNwbGF5VXJsLFxuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGhhc1dvcmtmbG93LFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIHQsXG4gICAgICBlZGl0b3JCYWNrTGluayxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgdG89e2VkaXRvckJhY2tMaW5rfT5cbiAgICAgICAgICA8QmFja0Fycm93PuKGkDwvQmFja0Fycm93PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8QmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5iYWNrQ29sbGVjdGlvbicsIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTGFiZWw6IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvQmFja0NvbGxlY3Rpb24+XG4gICAgICAgICAgICB7aGFzQ2hhbmdlZCA/IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNDaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnNhdmVkQ2hhbmdlcycpfTwvQmFja1N0YXR1c0NoYW5nZWQ+XG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c1VuY2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuY2hhbmdlc1NhdmVkJyl9PC9CYWNrU3RhdHVzVW5jaGFuZ2VkPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbkJhY2tMaW5rPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICAgIDxUb29sYmFyU3ViU2VjdGlvbkZpcnN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93ID8gdGhpcy5yZW5kZXJXb3JrZmxvd1NhdmVDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvd1xuICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyV29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoKVxuICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlUHVibGlzaENvbnRyb2xzKCl9XG4gICAgICAgICAgPC9Ub29sYmFyU3ViU2VjdGlvbkxhc3Q+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NYWluPlxuICAgICAgICA8VG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgICAgaW1hZ2VVcmw9e3VzZXI/LmF2YXRhcl91cmx9XG4gICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25NZXRhPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRWRpdG9yVG9vbGJhcik7XG4iXX0= */"));
const DeleteButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe14",
  label: "DeleteButton"
})(_netlifyCmsUiDefault.buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SaveButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe15",
  label: "SaveButton"
})(_netlifyCmsUiDefault.buttons.lightBlue, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedToolbarButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "evqrzhe16",
  label: "PublishedToolbarButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishedButton = ( /*#__PURE__*/0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe17",
  label: "PublishedButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "evqrzhe18",
  label: "PublishButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusButton = ( /*#__PURE__*/0, _styledBase.default)(DropdownButton, {
  target: "evqrzhe19",
  label: "StatusButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe20",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";display:flex;align-items:center;a,", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.blue, ";}", _netlifyCmsUiDefault.Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RefreshPreviewButton = (0, _styledBase.default)("button", {
  target: "evqrzhe21",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "evqrzhe23",
  label: "PreviewLink"
});
const StatusDropdownItem = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.DropdownItem, {
  target: "evqrzhe22",
  label: "StatusDropdownItem"
})(_netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class EditorToolbar extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "renderSimpleSaveControls", () => {
      const {
        showDelete,
        onDelete,
        t
      } = this.props;
      return (0, _core.jsx)("div", null, showDelete ? (0, _core.jsx)(DeleteButton, {
        onClick: onDelete
      }, t('editor.editorToolbar.deleteEntry')) : null);
    });

    _defineProperty(this, "renderDeployPreviewControls", label => {
      const {
        deployPreview = {},
        loadDeployPreview,
        t
      } = this.props;
      const {
        url,
        status,
        isFetching
      } = deployPreview;

      if (!status) {
        return;
      }

      const deployPreviewReady = status === 'SUCCESS' && !isFetching;
      return (0, _core.jsx)(PreviewButtonContainer, null, deployPreviewReady ? (0, _core.jsx)(PreviewLink, {
        rel: "noopener noreferrer",
        target: "_blank",
        href: url
      }, (0, _core.jsx)("span", null, label), (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "new-tab",
        size: "xsmall"
      })) : (0, _core.jsx)(RefreshPreviewButton, {
        onClick: loadDeployPreview
      }, (0, _core.jsx)("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "refresh",
        size: "xsmall"
      })));
    });

    _defineProperty(this, "renderWorkflowStatusControls", () => {
      const {
        isUpdatingStatus,
        onChangeStatus,
        currentStatus,
        t,
        useOpenAuthoring
      } = this.props;
      return (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "120px",
        renderButton: () => (0, _core.jsx)(StatusButton, null, isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.setStatus'))
      }, (0, _core.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.draft'),
        onClick: () => onChangeStatus('DRAFT'),
        icon: currentStatus === _publishModes.status.get('DRAFT') ? 'check' : null
      }), (0, _core.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.inReview'),
        onClick: () => onChangeStatus('PENDING_REVIEW'),
        icon: currentStatus === _publishModes.status.get('PENDING_REVIEW') ? 'check' : null
      }), useOpenAuthoring ? '' : (0, _core.jsx)(StatusDropdownItem, {
        label: t('editor.editorToolbar.ready'),
        onClick: () => onChangeStatus('PENDING_PUBLISH'),
        icon: currentStatus === _publishModes.status.get('PENDING_PUBLISH') ? 'check' : null
      }));
    });

    _defineProperty(this, "renderNewEntryWorkflowPublishControls", ({
      canCreate,
      canPublish
    }) => {
      const {
        isPublishing,
        onPublish,
        onPublishAndNew,
        onPublishAndDuplicate,
        t
      } = this.props;
      return canPublish ? (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPublish
      }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPublishAndNew
      }), (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPublishAndDuplicate
      })) : null) : '';
    });

    _defineProperty(this, "renderExistingEntryWorkflowPublishControls", ({
      canCreate,
      canPublish
    }) => {
      const {
        unPublish,
        onDuplicate,
        isPersisting,
        t
      } = this.props;
      return canPublish || canCreate ? (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, isPersisting ? t('editor.editorToolbar.unpublishing') : t('editor.editorToolbar.published'))
      }, canPublish && (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.unpublish'),
        icon: "arrow",
        iconDirection: "right",
        onClick: unPublish
      }), canCreate && (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.duplicate'),
        icon: "add",
        onClick: onDuplicate
      })) : '';
    });

    _defineProperty(this, "renderExistingEntrySimplePublishControls", ({
      canCreate
    }) => {
      const {
        onDuplicate,
        t
      } = this.props;
      return canCreate ? (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, t('editor.editorToolbar.published'))
      }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.duplicate'),
        icon: "add",
        onClick: onDuplicate
      })) : (0, _core.jsx)(PublishedButton, null, t('editor.editorToolbar.published'));
    });

    _defineProperty(this, "renderNewEntrySimplePublishControls", ({
      canCreate
    }) => {
      const {
        onPersist,
        onPersistAndNew,
        onPersistAndDuplicate,
        isPersisting,
        t
      } = this.props;
      return (0, _core.jsx)("div", null, (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPersist
      }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPersistAndNew
      }), (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPersistAndDuplicate
      })) : null));
    });

    _defineProperty(this, "renderSimplePublishControls", () => {
      const {
        collection,
        hasChanged,
        isNewEntry,
        t
      } = this.props;
      const canCreate = collection.get('create');

      if (!isNewEntry && !hasChanged) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), this.renderExistingEntrySimplePublishControls({
          canCreate
        }));
      }

      return this.renderNewEntrySimplePublishControls({
        canCreate
      });
    });

    _defineProperty(this, "renderWorkflowSaveControls", () => {
      const {
        onPersist,
        onDelete,
        onDeleteUnpublishedChanges,
        showDelete,
        hasChanged,
        hasUnpublishedChanges,
        isPersisting,
        isDeleting,
        isNewEntry,
        isModification,
        t
      } = this.props;
      const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
      return [(0, _core.jsx)(SaveButton, {
        key: "save-button",
        onClick: () => hasChanged && onPersist()
      }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), !showDelete && !hasUnpublishedChanges && !isModification ? null : (0, _core.jsx)(DeleteButton, {
        key: "delete-button",
        onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
      }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
    });

    _defineProperty(this, "renderWorkflowPublishControls", () => {
      const {
        collection,
        currentStatus,
        isNewEntry,
        useOpenAuthoring,
        t
      } = this.props;
      const canCreate = collection.get('create');
      const canPublish = collection.get('publish') && !useOpenAuthoring;

      if (currentStatus) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel')), this.renderWorkflowStatusControls(), this.renderNewEntryWorkflowPublishControls({
          canCreate,
          canPublish
        }));
      }
      /**
       * Publish control for published workflow entry.
       */


      if (!isNewEntry) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), this.renderExistingEntryWorkflowPublishControls({
          canCreate,
          canPublish
        }));
      }
    });
  }

  componentDidMount() {
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t,
      editorBackLink
    } = this.props;
    return (0, _core.jsx)(ToolbarContainer, null, (0, _core.jsx)(ToolbarSectionBackLink, {
      to: editorBackLink
    }, (0, _core.jsx)(BackArrow, null, "\u2190"), (0, _core.jsx)("div", null, (0, _core.jsx)(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? (0, _core.jsx)(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : (0, _core.jsx)(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), (0, _core.jsx)(ToolbarSectionMain, null, (0, _core.jsx)(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowSaveControls() : this.renderSimpleSaveControls()), (0, _core.jsx)(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowPublishControls() : this.renderSimplePublishControls())), (0, _core.jsx)(ToolbarSectionMeta, null, (0, _core.jsx)(_SettingsDropdown.default, {
      displayUrl: displayUrl,
      imageUrl: user === null || user === void 0 ? void 0 : user.avatar_url,
      onLogoutClick: onLogoutClick
    })));
  }

}

_defineProperty(EditorToolbar, "propTypes", {
  isPersisting: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isUpdatingStatus: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  onPersist: _propTypes.default.func.isRequired,
  onPersistAndNew: _propTypes.default.func.isRequired,
  onPersistAndDuplicate: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onPublishAndNew: _propTypes.default.func.isRequired,
  onPublishAndDuplicate: _propTypes.default.func.isRequired,
  user: _propTypes.default.object,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  collection: _reactImmutableProptypes.default.map.isRequired,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _propTypes.default.object,
  loadDeployPreview: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  editorBackLink: _propTypes.default.string.isRequired
});

var _default = (0, _reactPolyglot.translate)()(EditorToolbar);

exports.default = _default;